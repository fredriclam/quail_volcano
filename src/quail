#!/usr/bin/env python
# ------------------------------------------------------------------------ #
#
#       quail: A lightweight discontinuous Galerkin code for
#              teaching and prototyping
#		<https://github.com/IhmeGroup/quail>
#       
#		Copyright (C) 2020-2021
#
#       This program is distributed under the terms of the GNU
#		General Public License v3.0. You should have received a copy
#       of the GNU General Public License along with this program.  
#		If not, see <https://www.gnu.org/licenses/>.
#
# ------------------------------------------------------------------------ #

# ------------------------------------------------------------------------ #
#
#       File : src/quail.py
#
#       Contains driver and helper functions for Quail.
#
# ------------------------------------------------------------------------ #
import argparse
import importlib
import numpy as np
import os
import sys

import defaultparams as default_deck
import errors
from general import ShapeType, SolverType, PhysicsType

import meshing.common as mesh_common
import meshing.gmsh as mesh_gmsh
import meshing.tools as mesh_tools

import numerics.timestepping.tools as stepper_tools

import physics.zerodimensional.zerodimensional as zerod
import physics.euler.euler as euler
import physics.navierstokes.navierstokes as navierstokes
import physics.scalar.scalar as scalar
import physics.chemistry.chemistry as chemistry
import physics.multiphasevpT.multiphasevpT as multiphasevpT

import physics.navierstokes.tools as ns_tools

import processing.readwritedatafiles as readwritedatafiles

import solver.DG as DG
import solver.ADERDG as ADERDG

import time
import multiprocessing as mp
from multidomain import Domain, Observer
# from src.physics import euler


def set_physics(mesh, physics_type):
	'''
	This function creates the physics object based on the input parameters.

	Inputs:
	-------
		order: order of solution approximation
		basis_type: solution basis type
		mesh: mesh object
		physics_type: desired physics type

	Outputs:
	--------
		physics: physics object
	'''
	ndims = mesh.ndims

	if PhysicsType[physics_type] == PhysicsType.ConstAdvScalar and \
			ndims == 1:
			physics_class = scalar.ConstAdvScalar1D
	elif PhysicsType[physics_type] == PhysicsType.ConstAdvScalar and \
			ndims == 2:
			physics_class = scalar.ConstAdvScalar2D
	elif PhysicsType[physics_type] == PhysicsType.ConstAdvDiffScalar and \
			ndims == 1:
		physics_class = scalar.ConstAdvDiffScalar1D
	elif PhysicsType[physics_type] == PhysicsType.ConstAdvDiffScalar and \
			ndims == 2:
		physics_class = scalar.ConstAdvDiffScalar2D
	elif PhysicsType[physics_type] == PhysicsType.Burgers and ndims == 1:
			physics_class = scalar.Burgers1D
	elif PhysicsType[physics_type] == PhysicsType.ModelProblem:
		physics_class = zerod.ModelProblem
	elif PhysicsType[physics_type] == PhysicsType.ModelPSRScalar:
		physics_class = zerod.ModelPSRScalar
	elif PhysicsType[physics_type] == PhysicsType.MultispeciesPSR:
		physics_class = zerod.MultispeciesPSR
	elif PhysicsType[physics_type] == PhysicsType.Pendulum:
		physics_class = zerod.Pendulum
	elif PhysicsType[physics_type] == PhysicsType.Euler and ndims == 1:
			physics_class = euler.Euler1D
	elif PhysicsType[physics_type] == PhysicsType.Euler and ndims == 2:
			physics_class = euler.Euler2D
	elif PhysicsType[physics_type] == PhysicsType.NavierStokes and ndims == 1:
		physics_class = navierstokes.NavierStokes1D
	elif PhysicsType[physics_type] == PhysicsType.NavierStokes and ndims == 2:
		physics_class = navierstokes.NavierStokes2D
	elif PhysicsType[physics_type] == PhysicsType.Chemistry and ndims ==1:
		physics_class = chemistry.Chemistry1D
	elif PhysicsType[physics_type] == PhysicsType.MultiphasevpT and ndims == 1:
		physics_class = multiphasevpT.MultiphasevpT1D
	elif PhysicsType[physics_type] == PhysicsType.MultiphasevpT and ndims == 2:
		physics_class = multiphasevpT.MultiphasevpT2D
	else:
			raise NotImplementedError

	physics = physics_class(mesh)

	return physics


def overwrite_params(params, params_new, allow_new_keys=False):
	'''
	This function overwrites default parameters in the params dict.

	Inputs:
	-------
		params: dict with values to be overwritten
		params_new: dict with desired values
		allow_new_keys: if True, then new keys may be added to params

	Outputs:
	--------
		params: dict with values to be overwritten (modified)
	'''
	if params_new is None:
		return params

	for key in params_new:
		if not allow_new_keys and key not in params.keys():
			raise KeyError
		params[key] = params_new[key]

	return params


def read_inputs(deck):
	'''
	This function reads in the input deck and overwrites the default
	parameters.

	Inputs:
	-------
		deck: input deck

	Outputs:
	--------
		deck: input deck (modified)
	'''
	# Defaults
	restart_params = default_deck.Restart.copy()
	stepper_params = default_deck.TimeStepping.copy()
	numerics_params = default_deck.Numerics.copy()
	mesh_params = default_deck.Mesh.copy()
	physics_params = default_deck.Physics.copy()
	IC_params = default_deck.InitialCondition.copy()
	exact_params = default_deck.ExactSolution.copy()
	BC_params = default_deck.BoundaryConditions.copy()
	source_params = default_deck.SourceTerms.copy()
	output_params = default_deck.Output.copy()

	# Overwrite
	try:
		restart_params = overwrite_params(restart_params, deck.Restart)
	except AttributeError:
		pass
	try:
		stepper_params = overwrite_params(stepper_params, deck.TimeStepping)
	except AttributeError:
		pass
	try:
		numerics_params = overwrite_params(numerics_params, deck.Numerics)
	except AttributeError:
		pass
	try:
		mesh_params = overwrite_params(mesh_params, deck.Mesh)
	except AttributeError:
		pass
	try:
		physics_params = overwrite_params(physics_params, deck.Physics, True)
	except AttributeError:
		pass
	try:
		IC_params = overwrite_params(IC_params, deck.InitialCondition, True)
	except AttributeError:
		pass
	try:
		exact_params = overwrite_params(exact_params, deck.ExactSolution,
				True)
	except AttributeError:
		pass
	try:
		BC_params = overwrite_params(BC_params, deck.BoundaryConditions,
				True)
	except AttributeError:
		pass
	try:
		source_params = overwrite_params(source_params, deck.SourceTerms,
				True)
	except AttributeError:
		pass
	try:
		output_params = overwrite_params(output_params, deck.Output)
	except AttributeError:
		pass

	return restart_params, stepper_params, numerics_params, mesh_params, \
			physics_params, IC_params, exact_params, BC_params, \
			source_params, output_params


def print_info(restart_params, stepper_params, numerics_params, mesh_params,
		physics_params, IC_params, exact_params, BC_params, source_params,
		output_params):
	print()
	print("=================================================")
	print("||                                             ||")
	print("||  Quail: a discontinuous Galerkin solver in  ||")
	print("||     Python for teaching and prototyping     ||")
	print("||                                             ||")
	print("=================================================")
	print()

	def print_dict(d):
		[print("   ", key, ":", value) for key, value in d.items()]
		print()

	# Print input deck
	if output_params["Verbose"]:
		print("-------------------")
		print("PRINTING INPUT DECK")
		print("-------------------")
		print()
		print("Restart:")
		print("--------")
		print_dict(restart_params)
		print("TimeStepping:")
		print("-------------")
		print_dict(stepper_params)
		print("Numerics:")
		print("---------")
		print_dict(numerics_params)
		print("Mesh:")
		print("-----")
		print_dict(mesh_params)
		print("Physics:")
		print("--------")
		print_dict(physics_params)
		print("InitialCondition:")
		print("-----------------")
		print_dict(IC_params)
		print("ExactSolution:")
		print("--------------")
		print_dict(exact_params)
		print("BoundaryConditions:")
		print("-------------------")
		print_dict(BC_params)
		print("SourceTerms:")
		print("------------")
		print_dict(source_params)
		print("Output:")
		print("-------")
		print_dict(output_params)


def driver(deck):
	'''
	This function processes the input deck and performs the simulation.

	Inputs:
	-------
		deck: input deck

	Outputs:
	--------
		solver: solver object
		physics: physics object
		mesh: mesh object
	'''
	'''
	Input deck
	'''
	restart_params, stepper_params, numerics_params, mesh_params, \
			physics_params, IC_params, exact_params, BC_params, \
			source_params, output_params = read_inputs(deck)
	# Print info
	print_info(restart_params, stepper_params, numerics_params, mesh_params,
			physics_params, IC_params, exact_params, BC_params,
			source_params, output_params)

	'''
	Mesh
	'''
	if mesh_params["File"] is not None:
		# Gmsh file
		mesh = mesh_gmsh.import_gmsh_mesh(mesh_params["File"])
	else:
		# Create our own mesh

		# Unpack
		shape = ShapeType[mesh_params["ElementShape"]]
		xmin = mesh_params["xmin"]
		xmax = mesh_params["xmax"]
		num_elems_x = mesh_params["NumElemsX"]
		num_elems_y = mesh_params["NumElemsY"]
		ymin = mesh_params["ymin"]
		ymax = mesh_params["ymax"]

		# Create mesh
		if shape is ShapeType.Segment:
			# 1D - segments
			mesh = mesh_common.mesh_1D(num_elems=num_elems_x,
					xmin=xmin, xmax=xmax)
		else:
			# 2D - quads or tris

			# First start with quads
			mesh = mesh_common.mesh_2D(num_elems_x=num_elems_x,
					num_elems_y=num_elems_y, xmin=xmin, xmax=xmax,
					ymin=ymin, ymax=ymax)
			# Split into tris if required
			if shape is ShapeType.Triangle:
				mesh = mesh_common.split_quadrils_into_tris(mesh)

	''' Impose periodicity if requested '''
	pb_x = mesh_params["PeriodicBoundariesX"]
	pb_y = mesh_params["PeriodicBoundariesY"]

	# Store periodic boundaries in pb
	pb = [None]*4
	if pb_x != []:
		pb[:2] = pb_x
	if pb_y != []:
		pb[2:] = pb_y

	# Make periodic
	if pb != [None]*4:
		mesh_tools.make_periodic_translational(mesh, x1=pb[0], x2=pb[1],
				y1=pb[2], y2=pb[3])


	'''
	Physics
	'''
	# Get order and basis type
	order = numerics_params["SolutionOrder"]
	basis_type = numerics_params["SolutionBasis"]

	# Create physics object
	physics = set_physics(mesh, physics_params["Type"])
	# Add tranport if using Navier-Stokes
	physics.get_transport = ns_tools.set_transport(physics_params["Transport"])
	# Set parameters
	pparams = physics_params.copy()
	pparams.pop("Type") # don't pass this key
	pparams.pop("Transport") # don't pass this key
	conv_flux_type = pparams.pop("ConvFluxNumerical")
	diff_flux_type = pparams.pop("DiffFluxNumerical")

	physics.set_conv_num_flux(conv_flux_type)
	physics.set_diff_num_flux(diff_flux_type)
	physics.set_physical_params(**pparams)

	# Initial condition
	iparams = IC_params.copy()
	IC_type = iparams.pop("Function")
	physics.set_IC(IC_type=IC_type, **iparams)

	# Exact solution
	if bool(exact_params): # checks if dictionary is not empty
		eparams = exact_params.copy()
		exact_type = eparams.pop("Function")
		physics.set_exact(exact_type=exact_type, **eparams)

	# Boundary conditions
	for bname, bparams in BC_params.items():
		bparams = bparams.copy()
		BC_type = bparams.pop("BCType")

		try:
			# Function required for StateAll
			fcn_type = bparams.pop("Function")
			physics.set_BC(bname, BC_type, fcn_type, **bparams)
		except KeyError:
			physics.set_BC(bname, BC_type, **bparams)

	# Source terms
	for sparams in source_params.values():
		sname = sparams["Function"]
		sparams.pop("Function")
		physics.set_source(source_type=sname, **sparams)


	'''
	Solver
	'''
	# Merge solver-related params
	solver_params = {**stepper_params, **numerics_params, **output_params}
	solver_params["RestartFile"] = restart_params["File"]
	solver_type = solver_params.pop("Solver")
	if SolverType[solver_type] is SolverType.DG:
		solver = DG.DG(solver_params, physics, mesh)
	elif SolverType[solver_type] is SolverType.ADERDG:
		solver = ADERDG.ADERDG(solver_params, physics, mesh)
	else:
		raise NotImplementedError


	'''
	Restart file
	'''
	if restart_params["File"] is not None:
		# Old solver
		solver_old = readwritedatafiles.read_data_file(solver_params[
				"RestartFile"])
		# Project if different basis and/or order
		if order != solver_old.order or solver.basis.BASIS_TYPE != \
				solver_old.basis.BASIS_TYPE:
			print("Projecting to a different solution basis and/or order")
			solver.project_state_to_new_basis(solver_old.state_coeffs,
					solver_old.basis, solver_old.order)
		else:
			solver.state_coeffs = solver_old.state_coeffs
			# Time
		if restart_params["StartFromFileTime"]:
			solver.time = solver_old.time
			solver.stepper.dt = 0.
			stepper_tools.set_time_stepping_approach(solver.stepper,
					solver.params)


	return solver, physics, mesh


def process_post_file(post_file, auto_process):
	'''
	This function processes and potentially runs the post-processing file.

	Inputs:
	-------
		post_file: name of post-processing file
		auto_process: if True, will automatically run the post-processing
			script at the end of the simulation
	'''
	if post_file != None:
		post_file = post_file.replace(".py","")
		try:
			print("\nRunning post-processing script")
			postprocess = importlib.import_module(post_file)
		except ModuleNotFoundError:
			raise errors.FileReadError(f"{post_file}.py not found")
	if auto_process == True and post_file == None:
		post_file = "post_process"
		try:
			print("\nRunning post-processing script")
			postprocess = importlib.import_module(post_file)
		except ModuleNotFoundError:
			print("Warning: post_process.py file not found")


def dom_recursive_build(deck, domain_list,
												domain_edges, global_timestepping,
												domain_edge_list=None,
												edge_name_to_loc_bdry=None):
	''' Builds Domain object. Called recursively to build the linked set of
	domains. '''
	if edge_name_to_loc_bdry is None:
		edge_name_to_loc_bdry = {}
	# Check global timestep settings
	if global_timestepping is None:
		global_timestepping = deck.__dict__.get("TimeStepping")
	else:
		deck.TimeStepping = global_timestepping
	# Build domain
	solver, physics, mesh = driver(deck)
	dom = Domain(solver, physics, mesh, deck.__name__)

	''' Add injections
	Injections are specified in the run parameter file by specifying
		list[dict("Function": Callable[solver, None](,
							"Initial": bool, "Postinitial", bool))] 
	where optional boolean arguments Initial and Postinitial specify respectively
	whether the function is called on the first invokation of custom_user_function
	and on subsequent invokations. Unlike default Quail functions, the provided
	function is directly callable and not a string that is looked up in an
	internal map. The function takes as argument solver and has no return args.
	The argument solver can be modified as a side effect.
	'''
	for func_spec in deck.__dict__.get("Inject", []):
		# Append injected function to multidomain's user function list
		dom.user_functions.append(func_spec["Function"],
			initial=func_spec.get("Initial", True),
			postinitial=func_spec.get("Postinitial", True),
			owner_domain=dom)

	# Add built domain to domain_list
	domain_list.append(dom)
	# Add edge set for node to graph
	domain_edges[deck.__name__] = {}
	# Process any linked domains
	if deck.__dict__.get("LinkedSolvers") is not None:
		for linked_solver in deck.LinkedSolvers:
			linked_deck_name = linked_solver["DeckName"].replace(".py", "")
			edge_name = linked_solver["BoundaryName"]
			# Build adjacent domain if it doesn't exist
			if linked_deck_name not in [dom.id for dom in domain_list]:
				dom_recursive_build(importlib.import_module(linked_deck_name),
														domain_list,
														domain_edges,
														global_timestepping,
														domain_edge_list=domain_edge_list,
														edge_name_to_loc_bdry=edge_name_to_loc_bdry)
			''' Add edges to edge set '''
			domain_edges[deck.__name__][edge_name] = \
				(deck.__name__, linked_deck_name)
			domain_edges[linked_deck_name][edge_name] = \
				(linked_deck_name, deck.__name__)
			if domain_edge_list is not None:
				domain_edge_list.append( {
					"name": edge_name,
					0: linked_deck_name,
					1: deck.__name__,
				})
			''' Add inverse mapping (edge_name -> local boundary name)'''
			if not edge_name_to_loc_bdry.get(deck.__name__):
				edge_name_to_loc_bdry[deck.__name__] = {}
			is_valid_construction = False
			for loc_name, bc in physics.BCs.items():
				if hasattr(bc,"bkey") and bc.bkey == edge_name:
					edge_name_to_loc_bdry[deck.__name__][edge_name] = loc_name
					is_valid_construction = True
			if not is_valid_construction:
				raise Exception("A BoundaryName specified in LinkedSolvers was not " +
												"a bkey of any boundary condition.")

			is_valid_construction = False
			linked_physics = domain_list[
				[dom.id for dom in domain_list].index(linked_deck_name)].physics
			if not edge_name_to_loc_bdry.get(linked_deck_name):
				edge_name_to_loc_bdry[linked_deck_name] = {}
			for loc_name, bc in linked_physics.BCs.items():
				if hasattr(bc,"bkey") and bc.bkey == edge_name:
					edge_name_to_loc_bdry[linked_deck_name][edge_name] = loc_name
					is_valid_construction = True
			if not is_valid_construction:
				raise Exception("A BoundaryName specified in LinkedSolvers was not " +
												"a bkey of any boundary condition.")


def main(argv):
	'''
	This is the top-level main function of quail.

	Inputs:
	-------
		argv: command-line arguments (run "quail -h" or see below for info)
	'''
	''' Parser '''
	my_parser = argparse.ArgumentParser(conflict_handler="resolve",
			description="This script is the driver for Stanford\'s Quail " +
			"solver")

	''' Command-line arguments '''
	# Input file
	my_parser.add_argument("inputdeck", type=str,
			help="this file contains all requested parameters for " +
			"the solver", nargs='?')
	# Post-processing script (optional)
	my_parser.add_argument("-p", "--post", type=str,
			help="post-processing script to execute")

	''' Process arguments '''
	args = my_parser.parse_args()

	input_deck = args.inputdeck
	post_file = args.post

	if input_deck is None and post_file is None:
		raise Exception("At least one of the input deck and the " +
				"post-processing script is required")

	''' Set current directory '''
	if input_deck is not None:
		file = input_deck
	else:
		file = post_file

	current_dir = os.path.dirname(os.path.abspath(file)) + "/"
	sys.path.append(current_dir)

	''' Process input domains	'''
	if input_deck is not None:
		# Create empty list of domain objects
		domain_list = []
		# Graph representing domain connectivity: maps node(str) -> edgeset(dict)
		domain_edges = {} 
		# List of edges (redundant but useful)
		_domain_edge_list = []
		# Map domain -> map(edge name known to graph -> mesh's local boundary name)
		edge_name_to_loc_bdry = {}
		# Global timestep settings, set by the first encountered option
		global_timestepping = None

		setup_timer_start = time.time()

		# Build domains (depth-first) starting from root deck
		dom_recursive_build(importlib.import_module(input_deck.replace(".py", "")),
												domain_list,
												domain_edges,
												global_timestepping,
												domain_edge_list=_domain_edge_list,
												edge_name_to_loc_bdry=edge_name_to_loc_bdry)
		
		_num_timesteps = domain_list[0].solver.params["NumTimeSteps"]

		for domain in domain_list:
			# Attach domain topology to each domain
			domain.domain_edges = domain_edges
			# Attach global-edge-name-to-local-boundary-name mapping
			domain.edge_name_to_loc_bdry = edge_name_to_loc_bdry
			# Synchronize num timesteps
			domain.num_timesteps = _num_timesteps

		# Set up subprocesses
		with mp.Manager() as manager:
			''' Initialize boundary data server
			Look up with Domain.edge_to_key(edge, node)
			'''
			boundaryData = manager.dict()
			# # Mimic graph structure
			# for node in domain_edges.keys():
			# 	boundaryData[node] = manager.dict()
			# for edge in _domain_edge_list:
			# 	boundaryData[edge[0]][edge["name"]] = manager.dict()
			# 	# Bind edge access from both adjacent nodes
			# 	boundaryData[edge[1]][edge["name"]] = \
			# 		boundaryData[edge[0]][edge["name"]]
			# 	# Initialize some data
			# 	boundaryData[edge[0]][edge["name"]][edge[0]] = manager.dict({
			# 		"payload": None,
			# 	})
			# 	boundaryData[edge[0]][edge["name"]][edge[1]] = manager.dict({
			# 		"payload": None,
			# 	})

			# Initialize queue for signalling to observer 
			ready_queue = mp.Queue()
			# Initialize condition for green-light signal from observer
			glight_condition = mp.Condition()
			# Initialize outputs server
			domain_outputs = manager.dict()

			# Default to serial handling
			run_serial = True
			if len(domain_list) > 1:
				run_serial = False
			# Connect each domain to server
			for domain in domain_list:
				domain.set_network(glight_condition, ready_queue,
									boundaryData, domain_outputs)
			# Create observer process
			observer = Observer(_num_timesteps, ready_queue,
													glight_condition, len(domain_list))
			observer_process = mp.Process(
				target=observer.listen,
				args=()
			)
			if run_serial:
				if len(domain_list) == 1:
					# Set network options
					domain_list[0].set_network(glight_condition, ready_queue,
										boundaryData, domain_outputs)
					# Initiate serial solve with observer process in background
					observer_process.start()
					setup_wall_time = time.time() - setup_timer_start
					run_total_wall_time_start = time.time()
					domain_list[0].solve()
					observer_process.join()
				else:
					raise Exception("Specified serial solve for multiple domains.")
			else:
				# Map domain list to processes
				process_list = [mp.Process(
					target=dom.solve,
					args=()
				) for dom in domain_list]

				# Start processes
				observer_process.start()
				for process in process_list:
					process.start()

				# Main process tasks
				setup_wall_time = time.time() - setup_timer_start
				run_total_wall_time_start = time.time()

				# # Join processes
				for process in process_list:
					process.join()
				observer_process.join()

		run_total_wall_time = time.time() - run_total_wall_time_start

		print(f"Global prep time  = {setup_wall_time:.5f} seconds")
		print(f"Global solve time = {run_total_wall_time:.5f} seconds")

		# Expose root solver for backward compatibility
		solver = domain_list[0].solver
		# Process post-processing script
		auto_process = solver.params["AutoPostProcess"]
		process_post_file(post_file, auto_process)
	else:
		# Post-process only
		process_post_file(post_file, True)

	print()
	print("----------")
	print("Quail done")
	print("----------")


if __name__ == "__main__":
	main(sys.argv[1:])






